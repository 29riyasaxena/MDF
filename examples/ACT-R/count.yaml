/Users/jeremyl/Documents/MDF Project/MDF/examples/ACT-R/count:
    format: ModECI MDF v0.1
    generating_application: Python modeci-mdf v0.1.3
    graphs:
        /Users/jeremyl/Documents/MDF Project/MDF/examples/ACT-R/count:
            conditions:
                node_specific:
                    declarative_memory:
                        type: Always
                        args: {}
                    retrieval_buffer:
                        type: JustRan
                        args:
                            dependency: declarative_memory
                    goal_buffer:
                        type: Always
                        args: {}
                    procedural_memory:
                        type: Always
                        args: {}
                    pattern_matching:
                        type: And
                        args:
                            dependencies:
                            -   type: EveryNCalls
                                args:
                                    dependency: retrieval_buffer
                                    n: 1
                            -   type: EveryNCalls
                                args:
                                    dependency: goal_buffer
                                    n: 1
                            -   type: EveryNCalls
                                args:
                                    dependency: declarative_memory
                                    n: 1
                    conflict_resolution:
                        type: JustRan
                        args:
                            dependency: pattern_matching
                    fire_production:
                        type: JustRan
                        args:
                            dependency: conflict_resolution
                    check_termination:
                        type: JustRan
                        args:
                            dependency: conflict_resolution
                termination:
                    check_term_true:
                        type: While
                        args:
                            dependencies:
                            - check_termination
            nodes:
                declarative_memory:
                    parameters:
                        chunks:
                        -   name: one
                            ISA: number
                            number: one
                            next: two
                        -   name: two
                            ISA: number
                            number: two
                            next: three
                        -   name: three
                            ISA: number
                            number: three
                            next: four
                        -   name: four
                            ISA: number
                            number: four
                            next: five
                        -   name: five
                            ISA: number
                            number: five
                        -   name: first-goal
                            ISA: count-from
                            start: two
                            end: four
                    functions:
                        retrieve_chunk:
                            function: retrieve_chunk
                            args:
                                pattern: {}
                                dm_chunks: chunks
                    states:
                        retrieval_state:
                            default_initial_value: '{}'
                            value: retrieve_chunk
                    output_ports:
                        dm_output:
                            value: retrieval_state
                retrieval_buffer:
                    input_ports:
                        retrieval_input_from_dm: {}
                    output_ports:
                        retrieval_output:
                            value: retrieval_input_from_dm
                goal_buffer:
                    parameters:
                        goal:
                            name: first-goal
                            ISA: count-from
                            start: two
                            end: four
                    states:
                        goal_state:
                            default_initial_value: goal
                            value: goal
                    output_ports:
                        goal_output:
                            value: goal_state
                procedural_memory:
                    parameters:
                        productions:
                        -   name: start
                            lhs:
                            -   buffer: goal
                                ISA: count-from
                                start: =num1
                                count: nil
                            rhs:
                            -   buffer: goal
                                ISA: count-from
                                count: =num1
                            -   buffer: retrieval
                                ISA: number
                                number: =num1
                        -   name: increment
                            lhs:
                            -   buffer: goal
                                ISA: count-from
                                count: =num1
                                end: -=num1
                            -   buffer: retrieval
                                ISA: number
                                number: =num1
                                next: =num2
                            rhs:
                            -   buffer: goal
                                ISA: count-from
                                count: =num2
                            -   buffer: retrieval
                                ISA: number
                                number: =num2
                                '!output!': (=num1)
                        -   name: stop
                            lhs:
                            -   buffer: goal
                                ISA: count-from
                                count: =num
                                end: =num
                            -   buffer: retrieval
                                ISA: number
                                number: =num
                            rhs:
                            -   buffer: goal
                                '!output!': (=num)
                    output_ports:
                        pm_output:
                            value: productions
                pattern_matching:
                    input_ports:
                        pattern_input_from_pm: {}
                        pattern_input_from_goal: {}
                        pattern_input_from_retrieval: {}
                    functions:
                        pattern_matching_function:
                            function: pattern_matching_function
                            args:
                                productions: pattern_input_from_pm
                                goal: pattern_input_from_goal
                                retrieval: pattern_input_from_retrieval
                    output_ports:
                        pattern_output:
                            value: pattern_matching_function
                conflict_resolution:
                    input_ports:
                        conflict_input: {}
                    functions:
                        conflict_resolution_function:
                            function: conflict_resolution_function
                            args:
                                productions: conflict_input
                    output_ports:
                        conflict_output_to_fire_prod:
                            value: conflict_resolution_function
                        conflict_output_to_check:
                            value: conflict_resolution_function
                fire_production:
                    input_ports:
                        fire_prod_input: {}
                    functions:
                        update_goal:
                            function: update_goal
                            args:
                                production: fire_prod_input
                        update_retrieval:
                            function: update_retrieval
                            args:
                                production: fire_prod_input
                    output_ports:
                        fire_prod_output_to_goal:
                            value: update_goal
                        fire_prod_output_to_retrieval:
                            value: update_retrieval
                check_termination:
                    input_ports:
                        check_input: {}
                    functions:
                        check_termination:
                            function: check_termination
                            args:
                                production: check_input
                    output_ports:
                        check_output:
                            value: check_termination
            edges:
                dm_to_pattern_edge:
                    sender: declarative_memory
                    receiver: retrieval_buffer
                    sender_port: dm_output
                    receiver_port: retrieval_input_from_dm
                retrieval_to_pattern_edge:
                    sender: retrieval_buffer
                    receiver: pattern_matching
                    sender_port: retrieval_output
                    receiver_port: pattern_input_from_retrieval
                goal_to_pattern_edge:
                    sender: goal_buffer
                    receiver: pattern_matching
                    sender_port: goal_output
                    receiver_port: pattern_input_from_goal
                pm_to_pattern_edge:
                    sender: procedural_memory
                    receiver: pattern_matching
                    sender_port: pm_output
                    receiver_port: pattern_input_from_pm
                pattern_to_conflict_edge:
                    sender: pattern_matching
                    receiver: conflict_resolution
                    sender_port: pattern_output
                    receiver_port: conflict_input
                conflict_to_fire_prod_edge:
                    sender: conflict_resolution
                    receiver: fire_production
                    sender_port: conflict_output_to_fire_prod
                    receiver_port: fire_prod_input
                conflict_to_check_edge:
                    sender: conflict_resolution
                    receiver: check_termination
                    sender_port: conflict_output_to_fire_prod
                    receiver_port: check_input
